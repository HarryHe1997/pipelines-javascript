# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
  run_test: true
  deploy_test: false

trigger:
- master

pool:
  name: 'Apigee'
  demands: 'npm'

stages:
- stage: Dev
  jobs:
  - job: GetLatestCode
    steps:
    - checkout: none
    - script: |
        cd /home/admin/TestSamples/pipelines-javascript-master
        ./get_latest_code.sh > get_latest_code.log
      displayName: 'Get latest code from TFS.'        
  - job: RunCiTestJs
    dependsOn: GetLatestCode
    condition: succeeded()
    steps:
    - checkout: none
    - script: |
        cd /home/admin/TestSamples/pipelines-javascript-master
        echo '-------- System.DefaultWorkingDirectory ------------------'
        echo $(System.DefaultWorkingDirectory)
        echo '-------- Agent.HomeDirectory ------------------'
        echo $(Agent.HomeDirectory)
        ./run_ci_tests_JS.sh > run_ci_tests_JS.log
      displayName: 'Run CI testing for JavaScript Code.'        
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit' # Options: JUnit, NUnit, VSTest, xUnit
        testResultsFiles: '**/TEST-*.xml' 
      condition: succeededOrFailed()
      displayName: 'Publish JUnit results.' 
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura' # Options: cobertura, jaCoCo
        summaryFileLocation: $(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml
        #pathToSources: # Optional
        #reportDirectory: # Optional
        #additionalCodeCoverageFiles: # Optional
        #failIfCoverageEmpty: false # Optional
      condition: succeededOrFailed()
      displayName: 'Publish code coverage results.' 
  - job: DeployToTraining
    dependsOn: RunCiTestJs
    condition: succeeded()
    steps:
    - checkout: none
    - script: |
        cd /home/admin/TestSamples/pipelines-javascript-master
        ./deploy_apigee_training.sh > deploy_apigee_training.log
      displayName: 'Deploy Apigee config and proxy code to training environment.'        


- stage: Test
  condition: and(succeeded(), eq(variables['run_test'], 'true'))
  jobs:
  - deployment: DeployToTestDummy
    condition: and(succeeded(), eq(variables['deploy_test'], 'true'))
    displayName: A Dummy deployment to Test environment
    environment: 'Test'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: echo dummy test deployment
  - job: CreateNewRelease    
    steps:
    - checkout: none
    - script: |
        cd /home/admin/TestSamples/pipelines-javascript-master
        echo '-------- Create a new release. ------------------'
        ./create_new_release_label.sh > create_new_release_label.log
      displayName: 'Create a new release label in TFS.'
  - job: GetCodePerReleaseLabel
    dependsOn: CreateNewRelease
    condition: succeeded()
    steps:
    - checkout: none
    - script: |
        cd /home/admin/TestSamples/pipelines-javascript-master
        ./get_code_per_release_label.sh > get_code_per_release_label.log
      displayName: 'Get code per release label from TFS.'        
  - job: DeployToTest
    dependsOn: GetCodePerReleaseLabel
    condition: succeeded()
    steps:
    - checkout: none
    - script: |
        cd /home/admin/TestSamples/pipelines-javascript-master
        ./deploy_apigee_test.sh > deploy_apigee_test.log
      displayName: 'Deploy Apigee config and proxy code to test environment.'        
  - job: RunKreTest
    dependsOn: DeployToTest
    condition: succeeded()
    steps:
    - checkout: none
    - script: |
        echo '-------- Starting running KRE tests... ------------------'
      displayName: 'Run KRE testing.'        









    
    
    
  

